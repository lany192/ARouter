apply plugin: "maven-publish"

afterEvaluate { project ->
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = aar.groupId
                artifactId = project.name
                version = aar.versionName
                afterEvaluate {
                    if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
                        from components.release
                    } else if (plugins.hasPlugin("java")) {
                        from components.java
                    }
                }
                repositories {
                    mavenLocal()
                    maven {
                        name = 'local_repository'
                        url = "${rootProject.rootDir}/repository"
                    }
//                    maven {
//                        allowInsecureProtocol true
//                        url = "http://localhost:5001/repository/maven-releases/"
//                        credentials {
//                            it.username = "admin"
//                            it.password = "dev123456"
//                        }
//                    }
                }
            }
        }
    }

    if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
        task androidJavadocs(type: Javadoc) {
            failOnError false
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            getArchiveClassifier().convention('javadoc')
            getArchiveClassifier().set('javadoc')
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            getArchiveClassifier().convention('sources')
            getArchiveClassifier().set('sources')
            from android.sourceSets.main.java.source
        }
    } else if (plugins.hasPlugin("java")) {
        task sourcesJar(type: Jar, dependsOn: classes) {
            getArchiveClassifier().convention('sources')
            getArchiveClassifier().set('sources')
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            getArchiveClassifier().convention('javadoc')
            getArchiveClassifier().set('javadoc')
            from javadoc.destinationDir
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
            archives androidSourcesJar
            archives androidJavadocsJar
        } else if (plugins.hasPlugin("java")) {
            archives sourcesJar
            archives javadocJar
        }
    }
}
